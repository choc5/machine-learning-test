{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 머신러닝 실습 - 타이타닉 생존자 예측"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "데이터 로드"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(891, 12) (418, 11) (418, 2)\n"
     ]
    }
   ],
   "source": [
    "train = pd.read_csv(\"./titanic/train.csv\")\n",
    "test = pd.read_csv(\"./titanic/test.csv\")\n",
    "submission = pd.read_csv(\"./titanic/submission.csv\")\n",
    "print(train.shape, test.shape, submission.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "데이터 병합"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1309, 13)\n"
     ]
    }
   ],
   "source": [
    "train['TrainSplit'] = 'Train'\n",
    "test['TrainSplit'] = 'Test'\n",
    "data = pd.concat([train, test], axis=0)\n",
    "print(data.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "데이터 결측값 처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['Age'] = data['Age'].fillna(data['Age'].mean())\n",
    "data['Fare'] = data['Fare'].fillna(data['Fare'].mode()[0])\n",
    "data['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "피처 수정 및 데이터 인코딩"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 생존확률에 영향을 줄 수 있는 피처 새로 생성\n",
    "data['FamilySize'] = data['SibSp'] + data['Parch'] + 1\n",
    "data['IsAlone'] = (data['FamilySize'] == 1).astype(int)\n",
    "\n",
    "# 생존과 관련성이 적은 피처 제거\n",
    "data.drop(['Cabin', 'Ticket', 'Name'], axis=1, inplace=True)\n",
    "\n",
    "# 원-핫 인코딩\n",
    "data = pd.get_dummies(data, columns=['Sex', 'Embarked'], drop_first=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "학습용 데이터, 테스트 데이터 구분"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train 데이터셋 크기 :  (891, 10) (891,)\n",
      "Test 데이터셋 크기 :  (418, 10)\n"
     ]
    }
   ],
   "source": [
    "selected_features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'FamilySize', 'IsAlone', 'Sex_male', 'Embarked_Q', 'Embarked_S']\n",
    "\n",
    "X_train = data.loc[data['TrainSplit'] == 'Train', selected_features]\n",
    "y_train = data.loc[data['TrainSplit'] == 'Train', 'Survived']\n",
    "X_test = data.loc[data['TrainSplit'] == 'Test', selected_features]\n",
    "print('Train 데이터셋 크기 : ', X_train.shape, y_train.shape)\n",
    "print('Test 데이터셋 크기 : ', X_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "학습용 데이터, 테스트 데이터 분할 및 피처 스케일링"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#데이터 분할\n",
    "X_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size=0.25, shuffle=True, random_state=10)\n",
    "\n",
    "#스케일링\n",
    "scaler = StandardScaler()\n",
    "X_tr = scaler.fit_transform(X_tr)\n",
    "X_val = scaler.transform(X_val)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "하이퍼 파라미터 튜닝"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {\n",
    "    'C': [0.01, 0.1, 1, 10, 100],\n",
    "    'solver': ['liblinear', 'lbfgs'],\n",
    "    'max_iter': [100, 200, 300],\n",
    "    'class_weight': [None, 'balanced']\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "모델 구축 및 로지스틱 회귀 모델로 학습"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "grid = GridSearchCV(LogisticRegression(), param_grid, cv=5, scoring='accuracy')\n",
    "grid.fit(X_tr, y_tr)\n",
    "\n",
    "best_lr_model = grid.best_estimator_\n",
    "y_val_pred = best_lr_model.predict(X_val)\n",
    "\n",
    "sns.heatmap(confusion_matrix(y_val, y_val_pred), annot=True, cbar=False, square=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "평가 지표 출력"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Parameters: {'C': 0.1, 'class_weight': None, 'max_iter': 100, 'solver': 'lbfgs'}\n",
      "Accuracy: 0.8340807174887892\n",
      "Precision: 0.7746478873239436\n",
      "Recall: 0.7236842105263158\n",
      "F1: 0.7482993197278912\n",
      "AUC: 0.8074203365556749\n"
     ]
    }
   ],
   "source": [
    "print(\"Best Parameters:\", grid.best_params_)\n",
    "print(\"Accuracy:\", accuracy_score(y_val, y_val_pred))\n",
    "print(\"Precision:\", precision_score(y_val, y_val_pred))\n",
    "print(\"Recall:\", recall_score(y_val, y_val_pred))\n",
    "print(\"F1:\", f1_score(y_val, y_val_pred))\n",
    "print(\"AUC:\", roc_auc_score(y_val, y_val_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Best Parameters\n",
    "- C: 로지스틱 회귀 모델에서 규제 강도를 조절하는 파라미터. 값이 작을수록 규제가 강해지고, 값이 클수록 규제가 약해진다.\n",
    "- class_weight: 클래스 불균형을 다루기 위해 사용하는 파라미터. None으로 설정해 모든 클래스에 동일한 가중치를 부여했다.\n",
    "- max_iter: 최적화를 위한 최대 반복 횟수.\n",
    "- solver: 최적화 알고리즘을 선택하는 파라미터. 'lbfgs'는 제한된 메모리 버전의 Broyden-Fletcher-Goldfarb-Shanno (BFGS) 알고리즘이다.\n",
    "\n",
    "### 평가 지표\n",
    "- Accuracy(정확도) : 모델이 올바르게 예측한 샘플의 비율.\n",
    "- Precision(정밀도) : 모델이 양성으로 예측한 샘플 중 실제로 양성인 샘플의 비율을 나타내는 지표.\n",
    "- Recall(재현율) : 실제 양성 샘플 중 모델이 양성으로 올바르게 예측한 샘플의 비율을 나타내는 지표.\n",
    "- F1 : 정밀도와 재현율의 조화 평균. 정밀도와 재현율 사이의 균형을 평가하는 지표.\n",
    "- AUC : ROC 곡선(수신자 조작 특성 곡선) 아래의 면적. 모델의 분류 성능을 평가하는 데 사용되는 지표로, 0.5는 랜덤 추측, 1.0은 완벽한 분류를 의미한다."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
